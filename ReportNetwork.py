from Network import Network
from Vulnerablity import Vulnerability
from Compute import Compute
import mysql.connector
import datetime

class ReportNetwork:
    def __init__(self, tenancy_name):
        self.report = dict()
        self.report["securityinternet"] = list()
        self.report["securityallprotocol"] = list()
        self.report["securityallports"] = list()
        self.compute = dict()
        self.compute["computeinternet"] = list()
        self.compute["computeallprotocol"] = list()
        self.compute["computeallports"] = list()
        self.computeObj = Compute(tenancy_name)
        self.network = Network(tenancy_name)
        self.compartments = self.network.compartments
        self.initialize_report()
        self.initialize_compute()

    def initialize_compute(self):
        for vnic_attachment in self.computeObj.active_vnic_attachments:
            subnet = self.network.get_subnet(vnic_attachment.subnet_id)
            instance = self.computeObj.get_instance(vnic_attachment.instance_id)
            try:
                image = self.computeObj.compute_client.get_image(instance.image_id).data.display_name
            except:
                image = "Error image"
            
            vcn = self.network.get_vcn(subnet.vcn_id)
            if instance.compartment_id == self.network.identity.compartment_id:
                compartment_name = "Root"
            else:
                compartment_name = [
                    compartment.name
                    for compartment in self.compartments
                    if compartment.id == instance.compartment_id
                ][0]

            self.connections = mysql.connector.MySQLConnection(host= '150.136.145.149',
                user= 'root',
                password= 'cde3CDE#',
                database= 'cloudautomation',
                port= '1521',
                autocommit=True)

            mycursor = self.connections.cursor()
            sql = [datetime.date.today().strftime("%Y-%m-%d"),
            'ocid1.tenancy.oc1..aaaaaaaajehugl3ryss2gaxf3os7g5w4xdztfhy4coqnoizm2wpmrclnv5da',instance.id ,
            instance.display_name,
            instance.region,
            instance.availability_domain,
            instance.shape,
            instance.time_created,
            vcn.id,
            vcn.display_name,
            image,
            self.computeObj.get_vnic(vnic_attachment.vnic_id).public_ip,
            self.computeObj.get_vnic(vnic_attachment.vnic_id).private_ip,
            instance.compartment_id,
            compartment_name,
            vnic_attachment.vnic_id,
            vnic_attachment.subnet_id,
            "",
            "",
            ""
            ]

            mycursor.callproc('addCompute',sql)
            
            self.connections.close()

            

            if subnet.prohibit_public_ip_on_vnic == 0:
                for security_list in subnet.security_list_ids:
                    sls = self.network.get_security_list(security_list)
                    vulnerable = Vulnerability(sls)
                    if len(vulnerable.open_public_internet):
                        self.compute['computeinternet'].append({
                        "sls_name" : sls.display_name,
                        "subnet_name" : subnet.display_name,
                        "instance_name" : instance.display_name,
                        "vcn_name": vcn.display_name,
                        "compartment_name": compartment_name,
                        "os": image
                        })
                    if len(vulnerable.open_protocol):
                        self.compute['computeallprotocol'].append({
                        "sls_name" : sls.display_name,
                        "subnet_name" : subnet.display_name,
                        "instance_name" : instance.display_name,
                        "vcn_name": vcn.display_name,
                        "compartment_name": compartment_name,
                        "os": image
                        })
                    if len(vulnerable.open_port):
                        self.compute['computeallports'].append({
                        "sls_name" : sls.display_name,
                        "subnet_name" : subnet.display_name,
                        "instance_name" : instance.display_name,
                        "vcn_name": vcn.display_name,
                        "compartment_name": compartment_name,
                        "os": image
                        })
                    # if len(vulnerable.open_port80):
                    #     self.compute['computeport80'].append({
                    #     "sls_name" : sls.display_name,
                    #     "subnet_name" : subnet.display_name,
                    #     "instance_name" : instance.display_name,
                    #     "vcn_name": vcn.display_name,
                    #     "compartment_name": compartment_name,
                    #     "os": image
                    #     })
                    # if len(vulnerable.open_port7001):
                    #     self.compute['computeport7001'].append({
                    #     "sls_name" : sls.display_name,
                    #     "subnet_name" : subnet.display_name,
                    #     "instance_name" : instance.display_name,
                    #     "vcn_name": vcn.display_name,
                    #     "compartment_name": compartment_name,
                    #     "os": image
                    #     })

    def initialize_report(self):
        for compartment in self.compartments:
            for vcn in self.network.get_vcns(compartment.id):
                self.connections = mysql.connector.MySQLConnection(host= '150.136.145.149',
                        user= 'root',
                        password= 'cde3CDE#',
                        database= 'cloudautomation',
                        port= '1521',
                        autocommit=True)

                mycursor = self.connections.cursor()
                sql = [datetime.date.today().strftime("%Y-%m-%d"),
                'ocid1.tenancy.oc1..aaaaaaaajehugl3ryss2gaxf3os7g5w4xdztfhy4coqnoizm2wpmrclnv5da',vcn.id ,
                vcn.display_name,
                vcn.cidr_block,
                vcn.compartment_id,
                compartment.name
                ]

                mycursor.callproc('addvcn',sql)
        
                self.connections.close()

                for subnet in self.network.get_subnets(compartment.id, vcn.id):

                    self.connections = mysql.connector.MySQLConnection(host= '150.136.145.149',
                        user= 'root',
                        password= 'cde3CDE#',
                        database= 'cloudautomation',
                        port= '1521',
                        autocommit=True)

                    mycursor = self.connections.cursor()
                    sql = [datetime.date.today().strftime("%Y-%m-%d"),
                    'ocid1.tenancy.oc1..aaaaaaaajehugl3ryss2gaxf3os7g5w4xdztfhy4coqnoizm2wpmrclnv5da',subnet.id ,
                    subnet.display_name,
                    "subnet",
                    subnet.cidr_block,
                    subnet.availability_domain,
                    subnet.prohibit_public_ip_on_vnic,
                    subnet.vcn_id
                    ]

                    mycursor.callproc('addnetworkresources',sql)
            
                    self.connections.close()
                    

                    if subnet.prohibit_public_ip_on_vnic == 0:
                        for security_list in subnet.security_list_ids:
                            sls = self.network.get_security_list(security_list)
                            vulnerable = Vulnerability(sls)
                            if len(vulnerable.open_public_internet):
                                self.report['securityinternet'].append({
                                "sls_name" : sls.display_name,
                                "subnet_name" : subnet.display_name,
                                "no_of_rules" : str(len(vulnerable.open_public_internet)),
                                "vcn_name" : vcn.display_name,
                                "compartment_name" : compartment.name
                                })
                            if len(vulnerable.open_protocol):
                                self.report['securityallprotocol'].append({
                                "sls_name" : sls.display_name,
                                "subnet_name" : subnet.display_name,
                                "no_of_rules" : str(len(vulnerable.open_protocol)),
                                "vcn_name" : vcn.display_name,
                                "compartment_name" : compartment.name
                                })
                            if len(vulnerable.open_port):
                                self.report['securityallports'].append({
                                "sls_name" : sls.display_name,
                                "subnet_name" : subnet.display_name,
                                "no_of_rules" : str(len(vulnerable.open_port)),
                                "vcn_name" : vcn.display_name,
                                "compartment_name" : compartment.name
                                })
                            # if len(vulnerable.open_port80):
                            #     self.report['securityport80'].append({
                            #     "sls_name" : sls.display_name,
                            #     "subnet_name" : subnet.display_name,
                            #     "no_of_rules" : str(len(vulnerable.open_port80)),
                            #     "vcn_name" : vcn.display_name,
                            #     "compartment_name" : compartment.name
                            #     })
                            # if len(vulnerable.open_port7001):
                            #     self.report['securityport7001'].append({
                            #     "sls_name" : sls.display_name,
                            #     "subnet_name" : subnet.display_name,
                            #     "no_of_rules" : str(len(vulnerable.open_port7001)),
                            #     "vcn_name" : vcn.display_name,
                            #     "compartment_name" : compartment.name
                            #     })
