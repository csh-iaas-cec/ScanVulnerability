# Pre-requisites for running this script:
# *python 3.6
# *oci-cli should be pre-installed and configured.
# *oci-sdk should be pre-installed. Hint: run 'pip install oci' or 'yum install oci'
import time
start_time = time.time()
import oci
import sys
import os
import json
import configparser
from Report import Report
from Network import Network


new_words =["orasenatdhubsred01"]





for t in new_words:
    print(t)
    network = Network(t)
    data = {}
    data['security'] = {}
    data['security']["securityinternet"] = []
    data["security"]["securityallprotocol"] = list()
    data["security"]["securityallports"] = list()
    data["security"]["securityport80"] = list()
    data["security"]["securityport7001"] = list()
    config = network.config
    ten_id = config['tenancy']
    virtual_network_client = oci.core.VirtualNetworkClient(config)
    comp_ls = network.compartments
    print(len(comp_ls))
    count=0
    for c in comp_ls:
        comp_ids = c.id
        vcn_ls = network.get_vcns(comp_ids)
        count+=1
        for v in vcn_ls:
            vcn_ids = v.id
            sb_ls = network.get_subnets(comp_ids, vcn_ids)
            for i in sb_ls:
                
                if i.prohibit_public_ip_on_vnic == 0:
                    route_table_id = i.route_table_id
                    security_list_ids = i.security_list_ids
                    subnet_name = i.display_name
                    vul_ingress_rule_list_pubint = []
                    vul_ingress_rule_list_allprotocol = []
                    vul_ingress_rule_list_portall = []
                    vul_ingress_rule_list_port80 = []
                    vul_ingress_rule_list_port7001 = []                
                    for sl in security_list_ids:
                        sls = network.get_security_list(sl)
                        for j in sls.ingress_security_rules:
                            if j.source == "0.0.0.0/0":
                                vul_ingress_rule_list_pubint.append(j)
                        for k in sls.ingress_security_rules:
                            if k.protocol == "all":
                                vul_ingress_rule_list_allprotocol.append(k)
                        for l in sls.ingress_security_rules:
                            if not l.tcp_options:
                                vul_ingress_rule_list_portall.append(l)
                            else:
                                if l.tcp_options.destination_port_range:
                                    if l.tcp_options.destination_port_range.min == 1 and  l.tcp_options.destination_port_range.max == 65535:
                                        vul_ingress_rule_list_portall.append(l)
                                    if l.tcp_options.destination_port_range.min == 80 and  l.tcp_options.destination_port_range.max == 80:
                                        vul_ingress_rule_list_port80.append(l)
                                    if l.tcp_options.destination_port_range.min == 7002 and  l.tcp_options.destination_port_range.max == 7002:
                                        vul_ingress_rule_list_port7001.append(l)
                        
                        
                        if len(vul_ingress_rule_list_pubint):
                            data['security']['securityinternet'].append({
                            "sls_name" : sls.display_name,
                            "subnet_name" : subnet_name,
                            "no_of_rules" : str(len(vul_ingress_rule_list_pubint)),
                            "vcn_name" : v.display_name,
                            "compartment_name" : c.name
                            })
                        if len(vul_ingress_rule_list_allprotocol):
                            data['security']['securityallprotocol'].append({
                            "sls_name" : sls.display_name,
                            "subnet_name" : subnet_name,
                            "no_of_rules" : str(len(vul_ingress_rule_list_allprotocol)),
                            "vcn_name" : v.display_name,
                            "compartment_name" : c.name
                            })
                        if len(vul_ingress_rule_list_portall):
                            data['security']['securityallports'].append({
                            "sls_name" : sls.display_name,
                            "subnet_name" : subnet_name,
                            "no_of_rules" : str(len(vul_ingress_rule_list_portall)),
                            "vcn_name" : v.display_name,
                            "compartment_name" : c.name
                            })
                        if len(vul_ingress_rule_list_port80):
                            data['security']['securityport80'].append({
                            "sls_name" : sls.display_name,
                            "subnet_name" : subnet_name,
                            "no_of_rules" : str(len(vul_ingress_rule_list_port80)),
                            "vcn_name" : v.display_name,
                            "compartment_name" : c.name
                            })
                        if len(vul_ingress_rule_list_port7001):
                            data['security']['securityport7001'].append({
                            "sls_name" : sls.display_name,
                            "subnet_name" : subnet_name,
                            "no_of_rules" : str(len(vul_ingress_rule_list_port7001)),
                            "vcn_name" : v.display_name,
                            "compartment_name" : c.name
                            })
    data['iam_security'] = list()
    r1 = Report(t)
    data['iam_security'].append(r1.report)
    with open(t+'security.json', 'w') as outfile:
        json.dump(data, outfile,ensure_ascii=False,indent=2,sort_keys=True)
    print(count)

print("--- %s seconds ---" % (time.time() - start_time))

