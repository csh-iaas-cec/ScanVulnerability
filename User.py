from mfa import MFA

"""
Defines logic for the user type

"""
class User:
	def __init__(self, user_object=None):
		self.user_data = user_object

	def can_use_api_keys(self):
		return self.user_data.capabilities.can_use_api_keys

	def can_use_auth_tokens(self):
		return self.user_data.capabilities.can_use_auth_tokens

	def can_use_console_password(self):
		return self.user_data.capabilities.can_use_console_password

	def can_use_customer_secret_keys(self):
		return self.user_data.capabilities.can_use_customer_secret_keys

	def can_use_smtp_credentials(self):
		return self.user_data.capabilities.can_use_smtp_credentials

	def is_user_federated(self):
		return self.user_data.external_identifier != None

#	User is local if he is not federated and has only console password capabilities
	def is_user_local(self):
		if(self.is_user_federated()==False):
			if(self.can_use_console_password()):
				if(not self.can_use_smtp_credentials() and not self.can_use_auth_tokens() and not self.can_use_api_keys() and not self.can_use_customer_secret_keys()):
					return True
				else:
					return False
		return False
#	User is service if he is not federated and has all user capabilities except Console password capabilities
	def is_user_service(self):
		if(self.is_user_federated()==False):
			if(not self.can_use_console_password()):
				return True
			else:
				return False
		return False

# 	User must belong to either local or federated or service 
	def is_user_valid(self):
		if(self.is_user_federated()):
			return True
		elif((self.is_user_local() and not self.is_user_service()) or (not self.is_user_local() and self.is_user_service()) ):
			return True
		else:
			return False
#	Call mfa class to check if user is mfa enables
	def is_user_mfa(self,private_path,tenancy_id,admin_user_id,user_id,fingerprint):
		if(True):
			mfa = MFA(private_path,tenancy_id,admin_user_id,fingerprint)
			return mfa.is_user_mfa(user_id)
		else:
			return None
