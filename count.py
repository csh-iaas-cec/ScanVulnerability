import oci
import sys
from Identity import Identity
from ReportNetwork import ReportNetwork
from Network import Network
import mysql.connector
import datetime
class Count:
    def __init__(self, tenancy_name):
        self.identity = Identity(tenancy_name)
        self.config = self.identity.config
        self.tenancy_id = self.config["tenancy"]
        self.report = ReportNetwork(tenancy_name)
        self.compute_client = oci.core.ComputeClient(self.config)
        self.block_storage_client = oci.core.BlockstorageClient(self.config)
        self.object_storage_client = oci.object_storage.ObjectStorageClient(self.config)
        self.instances = list()
        self.boot_volumes = list()
        self.block_volumes = list()
        self.buckets = list()
        self.objects = list()
        self.compartments = self.identity.compartments

        self.block_volume_attachments = list()
        self.boot_volume_attachments = list()

        self.set_buckets()
        self.set_total_volumes()
        self.set_total_boot_volumes()
        self.set_total_volume_attachments()
        self.set_total_boot_volume_attachments()

        self.initialize_connector()

    def initialize_connector(self):
        self.connections = mysql.connector.MySQLConnection(host= '150.136.145.149',
            user= 'root',
            password= 'cde3CDE#',
            database= 'cloudautomation',
            port= '1521',
            autocommit=True)

    def get_boot_volume_attachment_from_boot_volume(self, boot_volume_id):
        """Get VCN details from vcn_id"""
        try:
            return [boot_volume_attachment
            for boot_volume_attachment in self.boot_volume_attachments
            if boot_volume_attachment.boot_volume_id == boot_volume_id][0]
        except:
            return False

    def get_block_volume_attachment_from_block_volume(self, block_volume_id):
        """Get VCN details from vcn_id"""
        try:
            return [block_volume_attachment
            for block_volume_attachment in self.block_volume_attachments
            if block_volume_attachment.volume_id == block_volume_id][0]
        except:
            return False

    def update_subnet(self):
        for compartment in self.compartments:
            for vcn in self.report.network.get_vcns(compartment.id):
                for subnet in self.report.network.get_subnets(compartment.id, vcn.id):



                    mycursor = self.connections.cursor()
                    sql = [datetime.date.today().strftime("%Y-%m-%d"),
                    self.tenancy_id,subnet.id ,
                    subnet.display_name,
                    "subnet",
                    subnet.cidr_block,
                    subnet.availability_domain,
                    subnet.prohibit_public_ip_on_vnic,
                    subnet.vcn_id
                    ]

                    mycursor.callproc('addnetworkresources',sql)

    def update_volume(self):
        for boot in self.boot_volumes:
            attached_instance = ""
            instance_id = ""
            if self.get_boot_volume_attachment_from_boot_volume(boot.id):
                boot_attachment = self.get_boot_volume_attachment_from_boot_volume(boot.id)
                instance_id = boot_attachment.instance_id
                attached_instance = self.report.computeObj.get_instance(instance_id).display_name

            compartment_name = self.identity.get_compartment_path_name(boot.compartment_id)
            mycursor = self.connections.cursor()
            sql = [datetime.date.today().strftime("%Y-%m-%d"),
            self.tenancy_id,
            'bootVolume',
            boot.id,
            boot.size_in_gbs,
            attached_instance,
            instance_id,
            compartment_name,
            boot.display_name]

            mycursor.callproc('addVolume',sql)

        for block in self.block_volumes:
            attached_instance = ""
            instance_id = ""
            if self.get_block_volume_attachment_from_block_volume(block.id):
                block_attachment = self.get_block_volume_attachment_from_block_volume(block.id)
                instance_id = block_attachment.instance_id
                attached_instance = self.report.computeObj.get_instance(instance_id).display_name

            compartment_name = self.identity.get_compartment_path_name(block.compartment_id)
            mycursor = self.connections.cursor()
            sql = [datetime.date.today().strftime("%Y-%m-%d"),
            self.tenancy_id,
            'block',
            block.id,
            block.size_in_gbs,
            attached_instance,
            instance_id,
            compartment_name,
            block.display_name]

            mycursor.callproc('addVolume',sql)

        self.connections.close()




    def get_compute_instances(self, compartment_id):
        return oci.pagination.list_call_get_all_results(self.compute_client.list_instances,compartment_id, retry_strategy=oci.retry.DEFAULT_RETRY_STRATEGY).data



    def update_compute(self):
        for vnic_attachment in self.report.computeObj.active_vnic_attachments:
            subnet = self.report.network.get_subnet(vnic_attachment.subnet_id)
            instance = self.report.computeObj.get_instance(vnic_attachment.instance_id)
            try:
                image = self.report.computeObj.compute_client.get_image(instance.image_id).data.display_name
            except:
                image = "Error image"
            vcn = self.report.network.get_vcn(subnet.vcn_id)
            if instance.compartment_id == self.report.network.identity.compartment_id:
                compartment_name = "Root"
            else:
                compartment_name = [
                    compartment.name
                    for compartment in self.compartments
                    if compartment.id == instance.compartment_id
                ][0]
            mycursor = self.connections.cursor()
            sql = [datetime.date.today().strftime("%Y-%m-%d"),
            self.tenancy_id,instance.id ,
            instance.display_name,
            instance.region,
            instance.availability_domain,
            instance.shape,
            instance.time_created,
            vcn.id,
            vcn.display_name,
            image,
            self.report.computeObj.get_vnic(vnic_attachment.vnic_id).public_ip,
            self.report.computeObj.get_vnic(vnic_attachment.vnic_id).private_ip,
            instance.compartment_id,
            compartment_name,
            vnic_attachment.vnic_id,
            vnic_attachment.subnet_id,
            "",
            "",
            ""
            ]

            mycursor.callproc('addCompute',sql)

            # self.connections.close()


    def update_vcns(self):
        for compartment in self.identity.compartments:
            for vcn in self.report.network.get_vcns(compartment.id):

                mycursor = self.connections.cursor()
                sql = [datetime.date.today().strftime("%Y-%m-%d"),
                self.tenancy_id,vcn.id ,
                vcn.display_name,
                vcn.cidr_block,
                vcn.compartment_id,
                compartment.name
                ]

                mycursor.callproc('addvcn',sql)

                # self.connections.close()
    def set_total_vms(self):
        for i in self.identity.compartments:
            for j in self.get_compute_instances(i.id):
                self.instances.append(j)
        for j in self.get_compute_instances(self.identity.compartment_id):
            self.instances.append(j)

    def get_total_vms(self):
        return self.instances

    def get_boot_volumes(self, availability_domain, compartment_id):
        return oci.pagination.list_call_get_all_results(self.block_storage_client.list_boot_volumes, availability_domain, compartment_id, retry_strategy=oci.retry.DEFAULT_RETRY_STRATEGY).data

    def set_total_boot_volumes(self):
        for i in self.identity.availability_domains:
            for j in self.identity.compartments:
                for k in self.get_boot_volumes(i.name, j.id):
                    self.boot_volumes.append(k)
        for i in self.identity.availability_domains:
            for k in self.get_boot_volumes(i.name, self.identity.compartment_id):
                self.boot_volumes.append(k)

    def get_total_boot_volumes(self):
        return self.boot_volumes

    def get_volumes(self, compartment_id):
        return oci.pagination.list_call_get_all_results(self.block_storage_client.list_volumes, compartment_id, retry_strategy=oci.retry.DEFAULT_RETRY_STRATEGY).data

    def set_total_volumes(self):
        for j in self.identity.compartments:
            for k in self.get_volumes(j.id):
                self.block_volumes.append(k)
        for k in self.get_volumes(self.identity.compartment_id):
            self.block_volumes.append(k)

    def get_total_volumes(self):
        return self.block_volumes

    def get_volume_attachments(self, compartment_id):
        return oci.pagination.list_call_get_all_results(self.compute_client.list_volume_attachments, compartment_id, retry_strategy=oci.retry.DEFAULT_RETRY_STRATEGY).data

    def set_total_volume_attachments(self):
        for j in self.identity.compartments:
            for k in self.get_volume_attachments(j.id):
                self.block_volume_attachments.append(k)
        for k in self.get_volume_attachments(self.identity.compartment_id):
            self.block_volume_attachments.append(k)

    def get_total_volume_attachments(self):
        return self.block_volume_attachments

    def get_boot_volume_attachments(self,availability_domain, compartment_id):
        return oci.pagination.list_call_get_all_results(self.compute_client.list_boot_volume_attachments,availability_domain, compartment_id, retry_strategy=oci.retry.DEFAULT_RETRY_STRATEGY).data

    def set_total_boot_volume_attachments(self):
        for i in self.identity.availability_domains:
            for j in self.identity.compartments:
                for k in self.get_boot_volume_attachments(i.name,j.id):
                    self.boot_volume_attachments.append(k)
        for i in self.identity.availability_domains:
            for k in self.get_boot_volume_attachments(i.name, self.identity.compartment_id):
                self.boot_volume_attachments.append(k)

    def get_total_boot_volume_attachments(self):
        return self.boot_volume_attachments


    def get_total_compartments(self):
        return self.compartments

    def list_buckets(self, namespace_name, compartment_id):
        return oci.pagination.list_call_get_all_results(self.object_storage_client.list_buckets, namespace_name, compartment_id, retry_strategy=oci.retry.DEFAULT_RETRY_STRATEGY).data

    def list_objects(self, namespace_name, bucket_name):
        return oci.pagination.list_call_get_all_results(self.object_storage_client.list_objects, namespace_name, bucket_name, retry_strategy=oci.retry.DEFAULT_RETRY_STRATEGY).data

    def set_buckets(self):
        for j in self.identity.compartments:
            for i in self.list_buckets("orasenatdhubsred01", j.id):
                self.buckets.append(i)
        for i in self.list_buckets("orasenatdhubsred01", self.identity.compartment_id):
            self.buckets.append(i)


    def update_objects(self):

        for j in self.buckets:
            self.connections = mysql.connector.MySQLConnection(host= '150.136.145.149',
                user= 'root',
                password= 'cde3CDE#',
                database= 'cloudautomation',
                port= '1521',
                autocommit=True)
            object = self.object_storage_client.get_bucket("orasenatdhubsred01", j.name).data
            compartment_name = self.identity.get_compartment_path_name(object.compartment_id)
            is_public = 1
            if object.public_access_type== "NoPublicAccess":
                is_public = 0
            # print(object)
            mycursor = self.connections.cursor()
            sql = [datetime.date.today().strftime("%Y-%m-%d"),
            object.name,
            len(self.list_objects("orasenatdhubsred01", j.name).objects),
            object.approximate_size,
            object.time_created,
            object.storage_tier,
            is_public,
            compartment_name,
            self.tenancy_id
            ]

            mycursor.callproc('add_object_storage',sql)

        self.connections.close()












tenancy_name = sys.argv[1]
# print(tenancy_name)
a = Count(tenancy_name)

# print(len(a.get_total_subnets()))
# print(len(a.get_total_boot_volumes()))
# print(len(a.get_total_vcns()))
# print(len(a.get_total_boot_volume_attachments()))
a.update_vcns()
a.update_compute()
a.update_subnet()
a.update_volume()
a.update_objects()
# print(a.get_total_volume_attachments())

