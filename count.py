import oci
from Identity import Identity
from ReportNetwork import ReportNetwork
from Network import Network
import mysql.connector
import datetime
class Count:
    def __init__(self, tenancy_name):
        self.identity = Identity(tenancy_name)
        self.config = self.identity.config
        self.report = ReportNetwork(tenancy_name)
        self.compute_client = oci.core.ComputeClient(self.config)
        self.block_storage_client = oci.core.BlockstorageClient(self.config)
        self.object_storage_client = oci.object_storage.ObjectStorageClient(self.config)
        self.instances = list()
        self.boot_volumes = list()
        self.block_volumes = list()
        self.buckets = list()
        self.objects = list()
        self.compartments = self.identity.compartments

        self.block_volume_attachments = list()
        self.boot_volume_attachments = list()

        self.set_buckets()
        self.set_total_volumes()
        self.set_total_boot_volumes()
        self.set_total_volume_attachments()
        self.set_total_boot_volume_attachments()

        self.initialize_connector()

    def initialize_connector(self):
        self.connections = mysql.connector.MySQLConnection(host= '150.136.145.149',
            user= 'root',
            password= 'cde3CDE#',
            database= 'cloudautomation',
            port= '1521',
            autocommit=True)

    def get_boot_volume_attachment_from_boot_volume(self, boot_volume_id):
        """Get VCN details from vcn_id"""
        try:
            return [boot_volume_attachment 
            for boot_volume_attachment in self.boot_volume_attachments 
            if boot_volume_attachment.boot_volume_id == boot_volume_id][0]
        except:
            return False

    def get_block_volume_attachment_from_block_volume(self, block_volume_id):
        """Get VCN details from vcn_id"""
        try:
            return [block_volume_attachment 
            for block_volume_attachment in self.block_volume_attachments 
            if block_volume_attachment.volume_id == block_volume_id][0]
        except:
            return False

    def update_volume(self):
        for boot in self.boot_volumes:
            attached_instance = ""
            instance_id = ""
            if self.get_boot_volume_attachment_from_boot_volume(boot.id):
                boot_attachment = self.get_boot_volume_attachment_from_boot_volume(boot.id)
                instance_id = boot_attachment.instance_id
                attached_instance = self.report.computeObj.get_instance(instance_id).display_name
            
            compartment_name = self.identity.get_compartment_path_name(boot.compartment_id)
            mycursor = self.connections.cursor()
            sql = [datetime.date.today().strftime("%Y-%m-%d"),
            'ocid1.tenancy.oc1..aaaaaaaajehugl3ryss2gaxf3os7g5w4xdztfhy4coqnoizm2wpmrclnv5da',
            'bootVolume',
            boot.id,
            boot.size_in_gbs,
            attached_instance,
            instance_id,
            compartment_name,
            boot.display_name]

            mycursor.callproc('addVolume',sql)
        
        for block in self.block_volumes:
            attached_instance = ""
            instance_id = ""
            if self.get_block_volume_attachment_from_block_volume(block.id):
                block_attachment = self.get_block_volume_attachment_from_block_volume(block.id)
                instance_id = block_attachment.instance_id
                attached_instance = self.report.computeObj.get_instance(instance_id).display_name
            
            compartment_name = self.identity.get_compartment_path_name(block.compartment_id)
            mycursor = self.connections.cursor()
            sql = [datetime.date.today().strftime("%Y-%m-%d"),
            'ocid1.tenancy.oc1..aaaaaaaajehugl3ryss2gaxf3os7g5w4xdztfhy4coqnoizm2wpmrclnv5da',
            'block',
            block.id,
            block.size_in_gbs,
            attached_instance,
            instance_id,
            compartment_name,
            block.display_name]

            mycursor.callproc('addVolume',sql)
            
        self.connections.close()




    def get_compute_instances(self, compartment_id):
        return oci.pagination.list_call_get_all_results(self.compute_client.list_instances,compartment_id).data

    def set_total_vms(self):
        for i in self.identity.compartments:
            for j in self.get_compute_instances(i.id):
                self.instances.append(j)
        for j in self.get_compute_instances(self.identity.compartment_id):
            self.instances.append(j)

    def get_total_vms(self):
        return self.instances

    def get_boot_volumes(self, availability_domain, compartment_id):
        return oci.pagination.list_call_get_all_results(self.block_storage_client.list_boot_volumes, availability_domain, compartment_id).data

    def set_total_boot_volumes(self):
        for i in self.identity.availability_domains:
            for j in self.identity.compartments:
                for k in self.get_boot_volumes(i.name, j.id):
                    self.boot_volumes.append(k)
        for i in self.identity.availability_domains:
            for k in self.get_boot_volumes(i.name, self.identity.compartment_id):
                self.boot_volumes.append(k)

    def get_total_boot_volumes(self):
        return self.boot_volumes

    def get_volumes(self, compartment_id):
        return oci.pagination.list_call_get_all_results(self.block_storage_client.list_volumes, compartment_id).data

    def set_total_volumes(self):
        for j in self.identity.compartments:
            for k in self.get_volumes(j.id):
                self.block_volumes.append(k)
        for k in self.get_volumes(self.identity.compartment_id):
            self.block_volumes.append(k)

    def get_total_volumes(self):
        return self.block_volumes

    def get_volume_attachments(self, compartment_id):
        return oci.pagination.list_call_get_all_results(self.compute_client.list_volume_attachments, compartment_id).data

    def set_total_volume_attachments(self):
        for j in self.identity.compartments:
            for k in self.get_volume_attachments(j.id):
                self.block_volume_attachments.append(k)
        for k in self.get_volume_attachments(self.identity.compartment_id):
            self.block_volume_attachments.append(k)

    def get_total_volume_attachments(self):
        return self.block_volume_attachments

    def get_boot_volume_attachments(self,availability_domain, compartment_id):
        return oci.pagination.list_call_get_all_results(self.compute_client.list_boot_volume_attachments,availability_domain, compartment_id).data

    def set_total_boot_volume_attachments(self):
        for i in self.identity.availability_domains:
            for j in self.identity.compartments:
                for k in self.get_boot_volume_attachments(i.name,j.id):
                    self.boot_volume_attachments.append(k)
        for i in self.identity.availability_domains:
            for k in self.get_boot_volume_attachments(i.name, self.identity.compartment_id):
                self.boot_volume_attachments.append(k)

    def get_total_boot_volume_attachments(self):
        return self.boot_volume_attachments


    def get_total_compartments(self):
        return self.compartments

    def list_buckets(self, namespace_name, compartment_id):
        return oci.pagination.list_call_get_all_results(self.object_storage_client.list_buckets, namespace_name, compartment_id).data

    def list_objects(self, namespace_name, bucket_name):
        return oci.pagination.list_call_get_all_results(self.object_storage_client.list_objects, namespace_name, bucket_name).data

    def set_buckets(self):
        for j in self.identity.compartments:
            for i in self.list_buckets("orasenatdhubsred01", j.id):
                self.buckets.append(i)
        for i in self.list_buckets("orasenatdhubsred01", self.identity.compartment_id):
            self.buckets.append(i)


    def update_objects(self):
        
        for j in self.buckets:
            self.connections = mysql.connector.MySQLConnection(host= '150.136.145.149',
                user= 'root',
                password= 'cde3CDE#',
                database= 'cloudautomation',
                port= '1521',
                autocommit=True)
            object = self.object_storage_client.get_bucket("orasenatdhubsred01", j.name).data
            compartment_name = self.identity.get_compartment_path_name(object.compartment_id)
            is_public = 1
            if object.public_access_type== "NoPublicAccess":
                is_public = 0
            print(object)
            mycursor = self.connections.cursor()
            sql = [datetime.date.today().strftime("%Y-%m-%d"),
            object.name,
            len(self.list_objects("orasenatdhubsred01", j.name).objects),
            object.approximate_size,
            object.time_created,
            object.storage_tier,
            is_public,
            compartment_name,
            'ocid1.tenancy.oc1..aaaaaaaajehugl3ryss2gaxf3os7g5w4xdztfhy4coqnoizm2wpmrclnv5da'
            ]

            mycursor.callproc('add_object_storage',sql)
            
        self.connections.close()


                

    


    

    
    
            

a = Count("orasenatdhubsred01")
# print(len(a.get_total_subnets()))
# print(len(a.get_total_boot_volumes()))
# print(len(a.get_total_vcns()))
# print(len(a.get_total_boot_volume_attachments()))
a.update_volume()
a.update_objects()
# print(a.get_total_volume_attachments())

