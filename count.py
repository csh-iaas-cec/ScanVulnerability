import oci
from Identity import Identity
from ReportNetwork import ReportNetwork
from Network import Network
import mysql.connector
import datetime
class Count:
    def __init__(self, tenancy_name):
        self.identity = Identity(tenancy_name)
        self.config = self.identity.config
        # self.network = Network(tenancy_name)
        self.report = ReportNetwork(tenancy_name)
        self.compute_client = oci.core.ComputeClient(self.config)
        self.block_storage_client = oci.core.BlockstorageClient(self.config)
        self.instances = list()
        self.boot_volumes = list()
        self.block_volumes = list()
        # self.vcns = self.network.vcns
        # self.subnets = self.network.subnets
        self.compartments = self.identity.compartments
        
        # self.set_total_vms()
        # self.set_total_boot_volumes()
        # self.set_total_volumes()

        self.initialize_connector()

    def initialize_connector(self):
        self.connections = mysql.connector.MySQLConnection(host= '150.136.145.149',
            user= 'root',
            password= 'cde3CDE#',
            database= 'cloudautomation',
            port= '1521',
            autocommit=True)

    def update_boot_volume(self):
        for boot in self.boot_volumes:
            
            mycursor = self.connections.cursor()
            sql = ['2018-01-23',
            'ocid1.tenancy.oc1..aaaaaaaajehugl3ryss2gaxf3os7g5w4xdztfhy4coqnoizm2wpmrclnv5da',
            'bootVolume',
            boot.id,
            boot.size_in_gbs,
            self.report.computeObj.get_instance_from_image(boot.image_id),
            'ocid1.instance.oc1.iad.abuwcljrrmcz2w3bndjsmyvj5fxw7lm2v2pb5b7zoeubvewnsbr4c6kyl6ia','false', 'false']

            mycursor.callproc('addVolume',sql)
            
            self.connections.close()




    def get_compute_instances(self, compartment_id):
        return oci.pagination.list_call_get_all_results(self.compute_client.list_instances,compartment_id).data

    def set_total_vms(self):
        for i in self.identity.compartments:
            for j in self.get_compute_instances(i.id):
                self.instances.append(j)
        for j in self.get_compute_instances(self.identity.compartment_id):
            self.instances.append(j)

    def get_total_vms(self):
        return self.instances

    def get_boot_volumes(self, availability_domain, compartment_id):
        return oci.pagination.list_call_get_all_results(self.block_storage_client.list_boot_volumes, availability_domain, compartment_id).data

    def set_total_boot_volumes(self):
        for i in self.identity.availability_domains:
            for j in self.identity.compartments:
                for k in self.get_boot_volumes(i.name, j.id):
                    self.boot_volumes.append(k)
        for i in self.identity.availability_domains:
            for k in self.get_boot_volumes(i.name, self.identity.compartment_id):
                self.boot_volumes.append(k)

    def get_total_boot_volumes(self):
        return self.boot_volumes

    def get_volumes(self, compartment_id):
        return oci.pagination.list_call_get_all_results(self.block_storage_client.list_volumes, compartment_id).data

    def set_total_volumes(self):
        for j in self.identity.compartments:
            for k in self.get_volumes(j.id):
                self.block_volumes.append(k)
        for k in self.get_volumes(self.identity.compartment_id):
            self.block_volumes.append(k)

    def get_total_volumes(self):
        return self.block_volumes

    def get_total_vcns(self):
        return self.vcns

    def get_total_subnets(self):
        return self.subnets

    def get_total_compartments(self):
        return self.compartments

    

    
    
            

a = Count("orasenatdhubsred01")
# print(len(a.get_total_subnets()))
# print(len(a.get_total_boot_volumes()))
# print(len(a.get_total_vcns()))
print(len(a.get_total_vms()))
# print(len(a.get_total_volumes()))

